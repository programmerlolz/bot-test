const { Scenes, Markup } = require("telegraf");
const { Request } = require("../database");

let cancel = Markup.inlineKeyboard([Markup.button.callback("üõë –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")]).reply_markup;

const stage = new Scenes.WizardScene(
    "send_request",
    async (ctx) => {
        if(ctx.state.user.status != 10){
            ctx.reply("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!");
            return ctx.scene.leave();
        }else{
            ctx.reply("üñ• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Ñ–æ—Ä—É–º–µ Lolz", {
                reply_markup: cancel
            });
            return ctx.wizard.next();
        }
    },
    async (ctx) => {
        if(!ctx.message?.text) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É");
        let link = ctx.message.text;
        if(!/lolz.guru\/.+?/g.test(link)) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É");
        ctx.wizard.state.request = {
            lolz: link
        };
        ctx.reply("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", {
            reply_markup: cancel
        });
        return ctx.wizard.next();
    },
    async (ctx) => {
        if(!ctx.message?.text) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç");
        ctx.wizard.state.request.experience = ctx.message.text;
        ctx.wizard.next();
        ctx.reply("üïî –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å", {
            reply_markup: cancel
        });
    },
    async (ctx) => {
        if(!ctx.message?.text) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å");
        ctx.wizard.state.request.time = ctx.message.text;
        ctx.scene.leave();
        if(ctx.state.user.status != 10) return ctx.reply("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ");
        let request = new Request({
            ...ctx.wizard.state.request,
            userId: ctx.from.id,
            status: 0
        });
        let result = await request.save().catch(e => {});
        if(!result) ctx.reply("‚ùå –û—à–∏–±–∫–∞");
        else {
            ctx.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
            ctx.telegram.sendMessage(ctx.state.settings.adminGroupId.toString(), `‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞–≤–∫–∞!
üë® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${ctx.from.id}">${ctx.from.username}</a>
üñ• –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ: <a href="${ctx.wizard.state.request.lolz}">–¢–´–ö</a>
‚ÑπÔ∏è –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: <code>${ctx.wizard.state.request.experience}</code>
üïî –í—Ä–µ–º—è: <code>${ctx.wizard.state.request.time}</code>
            `, {
                parse_mode: "HTML",
                reply_markup: Markup.inlineKeyboard([
                    [
                        Markup.button.callback("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "request_accept_" + ctx.from.id),
                        Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "request_decline_" + ctx.from.id)
                    ]
                ]).reply_markup
            });
        }
    }
);

module.exports = stage;
